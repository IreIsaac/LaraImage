<?php

namespace IreIsaac\LaraImage\Commands;

use League\Glide\Server;
use Illuminate\Console\Command;

class ClearImageCache extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'image:cache:clear';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Clear the cached images generated by the application';

    /**
     * The Image Driver
     * 
     * @var \League\Glide\Server
     */
    protected $server;

    /**
     * Create the command instance and set the glide server
     * 
     * @param \League\Glide\Server $server
     * @return void
     */
    public function __construct(Server $server)
    {
        parent::__construct();

        $this->server = $server;
    }

    /**
     * Execute the console command.
     *
     * @return void
     */
    public function handle()
    {
        $message = '--- Couldn\'t find any cached images in ' . $this->server->getCachePathPrefix() .' ---';

        if($this->dirExists($this->server->getCachePathPrefix())) {
            $this->clearCache();

            $message = '--- Image Cache Was Cleared Successfully ---';
        }

        // One less thing the app will have to do 
        // durring next image request
        $this->createCacheDir();

        return $this->info($message);
    }

    /**
     * handles deleting the directories where 
     * glide stores manipulated images
     * 
     * @return void
     */
    private function clearCache()
    {
        $this->filesystem()->deleteDir(
            $this->server->getCachePathPrefix()
        );

    }

    /**
     * Helper method to check if a directory exists using
     * the filesystem glide is depending on
     * 
     * @param  string $path relative path to a directory
     * @return boolean $exists
     */
    private function dirExists($path)
    {
        if($contents = $this->filesystem()->listContents($path, true)) {

            return (boolean) $contents;
        }
    }

    /**
     * create / recreate the cache directory
     * this way the app doesn't have to create
     * the next time a manipulated image is requested
     * 
     * @return void
     */
    private function createCacheDir()
    {
        if(! $this->dirExists($srcPath = $this->server->getSourcePathPrefix())) {
            $this->filesystem()->createDir($srcPath);
        }

        $this->filesystem()->createDir($this->server->getCachePathPrefix());
    }

    /**
     * get the underlying filesystem that Glide is using
     * 
     * @return \League\Flysystem\FilesystemInterface $filesystem
     */
    private function filesystem()
    {
        return $this->server->getSource();
    }
}
